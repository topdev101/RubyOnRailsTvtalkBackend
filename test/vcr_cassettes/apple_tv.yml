---
http_interactions:
- request:
    method: get
    uri: https://www.apple.com/tv-pr/originals.originals.json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apple
      Content-Type:
      - application/json;charset=utf-8
      X-Content-Type-Options:
      - nosniff
      Last-Modified:
      - Fri, 13 Aug 2021 15:05:07 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      X-Xss-Protection:
      - 1; mode=block
      X-Frame-Options:
      - SAMEORIGIN
      Host:
      - www.apple.com
      Content-Security-Policy:
      - 'default-src ''self'' blob: *.akamaized.net *.apple.com *.apple-mapkit.com
        *.cdn-apple.com *.organicfruitapps.com; child-src blob: embed.music.apple.com
        embed.podcasts.apple.com www.apple.com www.instagram.com platform.twitter.com
        www.youtube-nocookie.com; img-src ''unsafe-inline'' data: blob: *.apple.com
        *.apple-mapkit.com *.cdn-apple.com *.mzstatic.com; script-src ''unsafe-inline''
        ''unsafe-eval'' blob: *.apple.com *.apple-mapkit.com www.instagram.com platform.twitter.com;
        style-src ''unsafe-inline'' *.apple.com'
      Vary:
      - Accept-Encoding
      Cache-Control:
      - max-age=276
      Expires:
      - Fri, 13 Aug 2021 20:29:41 GMT
      Date:
      - Fri, 13 Aug 2021 20:25:05 GMT
      Content-Length:
      - '33088'
      X-Cache:
      - TCP_REFRESH_MISS from a23-218-251-35.deploy.akamaitechnologies.com (AkamaiGHost/10.4.4-34529956)
        (S)
      Connection:
      - keep-alive
      X-Cache-Remote:
      - TCP_REFRESH_MISS from a23-200-236-148.deploy.akamaitechnologies.com (AkamaiGHost/10.4.4-34529956)
        (S)
      Set-Cookie:
      - geo=US; path=/; domain=.apple.com
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 13 Aug 2021 20:25:05 GMT
recorded_with: VCR 6.0.0
